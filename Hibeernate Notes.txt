Hibernate
-------------------------

1) Hibernate is a object Relational Mapping tool.
2) Hibernate is used to store the objects in a database where as JDBC store primitive types in a database.
3) It provides connection pooling.
4) It provides two types of caching.
5) We do not need to write most of the sql scripts for insert, delete object and selecting the result set.
6) Hibernate is database independent code will work for oracle, MySql, SqlServer etc.
 7) As hibernate is set of objects we need not to learn sql languages .we treat table as object.
8) Basic sql queries are generated by hibernate.
9) We need not do query tuning in case of hibernate.
10) Development and maintenance is very easy because we need not to write queries.



Generator classes
It is used to generate identifier column values. The first is generally called identifier column.
The different generator classes are:-
1)sequence:- The database sequence is automatically generated.
2)Assigned :-get value from application
3)User defined generator class:-
4)UUID :-It uses 128bit UUID algorithm to generate identifiers of type string, unique within a network .
5)GUID:-It is a database generated string on oracle, MySql, Sql server.
6)Identity:-Mysql takes identity, oracle takes sequence.
7)foreign:- used in relationship primary key.
8)hilo:-hilo use hilo algorithm to efficiently generate identifiers of type long, sort, int given in a table and column only for a particular database. 
9)sequence-hilo:-same as hilo algorithm but it is for a given named Database sequence.
10)Native:-It picks identity, sequence or hilo depending upon the capabilities of the underlying database.
*oracle do not support identity, Mysql support .Oracle support sequence
11)Select:- Retrieves primary key assigned by database trigger by selecting the row by some unique key and retrieving the primary key value.
12)Increment:- it increments as sequence.


     Session
1)session.save():- It is used to save an object in the database.
2)session.update():-It is used to update an existing record.
3)session.delete():- It is used to delete an existing record.
4)session.load():-It is used to retrieve a database record in the object representation.
5)session.saveOnUpload :-If there is no record in the database then it will insert the record ,if there is record in the database it will update.
6)session.lock():-we can lock the database record using lock() method.
7)session.evict():-it will change the object from persistent state to detached state. It remove the one object from session.
8)session.flush:- it only update.
9)session.refresh():-it will synchronize database with session.
10)session.clear():-it removes all the objects from the session.
11)session.contains():-if the object is available in the session then it returns true.
12)session.disconnect():-disconnect the session from the current JDBC connection.
13)session.reconnect():- obtains a new JDBC connection.
14)session.isOpen():-checks if the session is still open.
15)transaction.commit():- it both update and commit.
16)session.get():-it is similar to session.load() to retrieve data from database.
If there is no record in the database get() return null where as load() throws Exception.


HQL (Hibernate Query Language)
1)HQL is similar to sql but the difference is we have to give pojo name and property name, instead of table name and column name.
2)HQL queries are database independent.
3)We can execute select, update and delete but not general insert.
Example:- insert into student1 select * from student;
4)If it is HQL directly we can get list of records and the query is database independent.
Example:-
1)update student set student name:=sname, studentAge:=sage where student no:=sno;
2)from:- from student;
3)select s.studentno, s.studentname from student s;
4)where:- from student where studentno >:studentNo;
5)Order by:-from student s where s.studentname:=sname order by s.studentno asc;
6)and – or :- from student s where s.studentid>:sid and/or s.studentage:=sage;
We can use named parameter (:sno) instead of positional parameter(?);


Criteria :-
1)in criteria we never write the query we build the query using some method.
2)all select queries we execute it using criteria and all the non-select queries(update/delete) we execute it using HQL.
3)to build the conditions we use Restrictions or Expression. Expression extends Restriction .
4)all the methods in restrictions class are static methods .All the expression class methods are returning different expression object and all those expression class are implementing criterion interface.
Expression class Methods:-
1)eq-equal
2)ne-not equal
3)like
4)ge-greater than equal
5)gt-greater
6)lt-less than
7)le-less than equal
8)between
9)in
10)isNull
11)isNotNull
12)and
13)or
14)idEq:-it take id column property automatically
15)ilike:-case-insensitive
Example:-
1)Criterian crit= Expression.ne(“studentNo”,new long(1));
2)Criterian crit= Expression.gt(“studentNo”,new long(1));
3)Criterian crit= Expression.like(“studentName”,”sandip”);
4)Criterian crit= Expression.between(“studentNo”,new long(5),new long(10));
5)sql query:-select sno,sname from student where sno=? Or sname=?;
Criteria crit=session.createCriteria(student.class);
Criterion crit1=Expression.eq(“studentNo”,new long(1));
Criterion crit2=Expression.eq(“studentName”,”sandip”);
Criterion crit3=Expression.or(crit1,crit2);
Criteria.add(crit3);
List studList=criteria.list();
•	Criteria is interface used to build the query.
•	Criterian is interface used for condition.









 












 

  


Procedure To Execute HQL Command:

    * If we want to execute execute an HQL query on a database, we need to create a query object
    * ” Query ” is an interface given in org.hibernate package
    * In order to get query object, we need to call createQuery() method in the session Interface
    * Query is an interface, QueryImpl is the implemented class
    * we need to call list method for executing an HQL command on database, it returns java.util.List
    * we need to use java.util.Iterator for iterating the List collection

Syntax:
Query qry = session.createQuery("--- HQL command ---");
List l = qry.list();
Iterator it = l.iterator();
while(it.hasNext())
{
  Object o = it.next();
  Product p = (Product)o;
}


---------------------
Case 1: [ Selecting Complete Object ]

    * In this approach, we are going to select complete object from the database, so while iterating the collection, we need to typecast each object into our  POJO class type only
    * Internally hibernate converts each row selected from the table into an object of POJO class and hibernate stores all these POJO class objects into list so while iterating the collection, we typecast into POJO class type

Example:
Query qry = session.createQuery("-- our HQL command --");
List l =qry.list();
Iterator it = l.iterator();
while(it.hasNext())
{
   Object o = it.next();
   Project p = (Product)o;
   ----- ------- ------
}


Case 2: [ Selecting Partial Object ]

    * In this approach we are going to select partial object, (selected columns, i mean more than one column not single column)
    * In this case hibernate internally stores the multiple column values of each row into an object array and stores these object arrays into List collection
    * At the time of iterating the collection, we need to typecast the result into an object arrays

Example:
Query qry = session.createQuery("select p.pid,p.pname from Product p");
List l =qry.list();
Iterator it = l.iterator();
while(it.hasNext())
{
   Object o[] = (Object o[])it.next();
   System.out.println("-------");
   ----- ------- ------
}

Case 3: [ Selecting Partial Object ]

    * In this case we are going to select partial object with single column from the database
    * In this case hibernate internally creates an object of that value type and stores all these objects into the list collection
    * At the time of iterating the collection, we need to typecast into that object type only

Example:

Query qry = session.createQuery("select p.pid from Product p");
List l =qry.list();
Iterator it = l.iterator();
while(it.hasNext())
{
   Integer i = (Integer)it.next();
   System.out.println(i.intValue());
   ----- ------- ------
}

Note:  it.next() return type is always Object


So far we done the operations on single object (single row), hear we will see modifications, updates on multiple rows of data (multiple objects) at a time.  In hibernate we can perform the operations on a single row (or) multiple rows at a time, if we do operations on multiple rows at once, then we can call this as bulk operations.

    * HQL is the own query language of hibernate and it is used to perform bulk operations on hibernate programs
    * An object oriented form of SQL is called HQL
    * hear we are going to replace table column names  with POJO class variable names and table names with POJO class names in order to get HQL commands

 
Advantages Of  HQL:

    * HQL is database independent, means if we write any program using HQL commands then our program will be able to execute in all the databases with out doing any further changes to it
    * HQL supports object oriented features like Inheritance, polymorphism, Associations(Relation ships)
    * HQL is initially given for selecting object from database and in hibernate 3.x we can do DML operations ( insert, update…) too

 
Different Ways Of Construction HQL Select

    * If we want to select a Complete Object from the database, we use POJO class reference in place of   *  while constructing the query
    * In this case (select a complete object from the database) we can directly start our HQL command from,  from key word

Example:
// In SQL
sql> select * from Product
Note: Product is the table name right....!!!
 
// In HQL
hql> select p from Product p
     [ or ]
     from Product p
Note: hear p is the reference...!!

 

    * If we want to load the Partial Object from the database that is only selective properties (selected columns) of an objects then we need to replace column names with POJO class variable names.

Example:
// In SQL
sql> select pid,pname from Product
Note: pid, pname are the columns Product is the table name right..!
 
// In HQL
hql> select p.productid,p.productName from Product p
     [ or ]
     from Product p ( we should not start from, from key word hear because
we selecting the columns hope you are getting me )
 
Note: hear p is the reference...!!
           productid,productName are POJO variables

 

    * It is also possible to load or select the object from the database by passing run time values into the query,  in this case we can use either ” ? ” symbol or label in an HQL command, the index number of  ” ? ” will starts from zero but not one ( Remember this, little important regarding interview point of view)

Example:
// In SQL
sql> select * from Product where pid=?
Note: Product is the table name right..!
 
// In HQL
hql> select p from Product p where p.productid=?
     [ or ]
     select p from Product p where p.productid=:java4s
     [ or ]
     from Product p where p.productid=?
     [ or ]
     from Product p where p.productid=:java4s
 
Note: Hear p is the reference...!!

    * Hear :java4s refers that, java4s is a label(colon ‘:’ symbol represents that its the label)
    * we used to store some values in this label in run time (in our class)


 